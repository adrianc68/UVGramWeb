@using UVGramWeb.Shared.Data
@using UVGramWeb.Shared.Models
@inject UVGramWeb.Services.IPostService PostService;
@inject UVGramWeb.Services.IAuthenticationService AuthenticationService
@inject IJSRuntime JS

<div class="publicationdetail card">
  <div class="pubd-img">

    @if (Images.Count > 1)
    {
      <div class="pudb-ic-previous-button">
        <button @onclick="PreviousImage">A</button>
      </div>
      <div class="pudb-ic-next-button">
        <button @onclick="NextImage">N</button>
      </div>
    }
    @if (Images != null && Images.Any())
    {
      <div class="pubd-img-container">
        <div class="pubd-img-wrapper" style="transform: translateX(-@(currentIndex * 100)%)">
          @foreach (var image in Images)
          {
            <img src="@image.Url" alt="Imagen"/>
          }
        </div>
      </div>
      <div class="pubd-indicators">
      @for (int i = 0; i < Images.Count; i++)
        {
          <div class="pubd-indicator @(i == currentIndex ? "active" : "")"></div>
        }
      </div>
    }
    else
    {
      <p class="pubd-indicator-nofiles">No hay imágenes disponibles.</p>
    }



  </div>
  <div class="pubd-details border-start">
    <div class="pubd-header border-bottom">
      <div class="userprofile">
        <UserProfile ImageUrl="@Post.owner.url"></UserProfile>
      </div>
      <div class="userdatapub">
        <span class="semibold"><a href="@Post.owner.username">@Post.owner.username</a></span>
        <span>@Post.owner.name</span>
      </div>
      <div class="pubd-header-actions">
        <button class="border-0 bg-transparent">
          <svg aria-label="Más opciones" class="_8-yf5 " color="#262626" fill="#262626" height="24" role="img"
            viewBox="0 0 24 24" width="24">
            <circle cx="12" cy="12" r="1.5"></circle>
            <circle cx="6" cy="12" r="1.5"></circle>
            <circle cx="18" cy="12" r="1.5"></circle>
          </svg>
        </button>
      </div>
    </div>
    <div class="pubd-comments">
      <div class="pubd-description">

        <div class="pudb-description-data">
          <span class="pudb-da-username"><a href="@Post.owner.username">@Post.owner.username:</a></span>
          <span>@Post.description</span>
        </div>
      </div>

      @foreach (var comment in Post.comments)
      {
        <CommentComp CommentData="@comment" ChangeAbstractPostSelected="ChangeAbstractPostData"></CommentComp>
      }

    </div>

    <div class="pubd-actions-content border-top">
      <div class="pubd-actions-data border-bottom">
        <div class="pubd-actions-data-mb">
          <button class="custom-btn custom-btn-secondary" @onclick="ChangeStatusLikePost">
            <div class="hp-icon">
              @if (Post.isLiked)
              {
                <svg width="24px" height="24px" color="#ff0000" fill="#ff0000" viewBox="0 0 512 512"
                  xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z" />
                </svg>
              }
              else
              {
                <svg aria-label="Me gusta" class="_8-yf5 " color="#8e8e8e" fill="#8e8e8e" height="24px" role="img"
                  viewBox="0 0 24 24" width="24px">
                  <path
                    d="M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197 7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141 14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675 1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04 6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61 2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018 2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774 2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z">
                  </path>
                </svg>
              }
            </div>
          </button>
          <button class="custom-btn custom-btn-secondary" @onclick="(() => ChangeAbstractPostData(Post))">
            <div class="hp-icon">
              <svg aria-label="Comentar" class="hp-icon" color="#8e8e8e" fill="#8e8e8e" height="24" role="img"
                viewBox="0 0 24 24" width="24">
                <path d="M20.656 17.008a9.993 9.993 0 10-3.59 3.615L22 22z" fill="none" stroke="currentColor"
                  stroke-linejoin="round" stroke-width="2"></path>
              </svg>
            </div>
          </button>
        </div>
        <div class="pubd-actions-data-mb">
          <button class="border-0 bg-transparent pd-emojis" @onclick="ShowCommentLikes">
            <span class="pubd-ad-likes semibold hp-username"><strong>@Post.likes</strong> Me gusta</span>
          </button>
        </div>
      </div>
      <div class="pubd-actions">
        <button class="border-0 bg-transparent pd-emojis" type="button">
          <svg aria-label="Emoji" class="_8-yf5 " color="#262626" fill="#262626" height="24" role="img"
            viewBox="0 0 24 24" width="24">
            <path
              d="M15.83 10.997a1.167 1.167 0 101.167 1.167 1.167 1.167 0 00-1.167-1.167zm-6.5 1.167a1.167 1.167 0 10-1.166 1.167 1.167 1.167 0 001.166-1.167zm5.163 3.24a3.406 3.406 0 01-4.982.007 1 1 0 10-1.557 1.256 5.397 5.397 0 008.09 0 1 1 0 00-1.55-1.263zM12 .503a11.5 11.5 0 1011.5 11.5A11.513 11.513 0 0012 .503zm0 21a9.5 9.5 0 119.5-9.5 9.51 9.51 0 01-9.5 9.5z">
            </path>
          </svg>
        </button>
        <div class="" style="right: 12px; bottom: 360px;"></div>
        <div class="pd-textarea">
          <textarea class="pd-input-textarea" autocomplete="off" autocorrect="off" type="text"
            placeholder="Agrega un comentario..." aria-label="Agrega un comentario" @oninput="ChangeComment"
            @bind="CommentObjectRequest.comment" @ref="commentTextarea" />
        </div>
        <button class="btn-link border-0 bg-transparent text-decoration-none" @onclick="CreateComment">
          <span>Publicar</span>
        </button>
      </div>
    </div>
  </div>

</div>

@code {
  [Parameter]
  public PostDetails Post { get; set; }
  public CreateComment CommentObjectRequest { get; set; } = new CreateComment();
  public AbstractPost SelectedAbstractPost { get; set; }
  [CascadingParameter] public IModalService Modal { get; set; } = default!;
  private List<Image> Images { get; set; } = new List<Image>();
  private int currentIndex = 0;
  private ElementReference commentTextarea;


  protected override void OnInitialized()
  {
    if (Post != null)
    {
      foreach (var file in Post.files)
      {
        Image image = new Image();
        image.Url = file.url;
        Images.Add(image);
      }
    }

    CommentObjectRequest.uuid = Post.uuid;
    SelectedAbstractPost = Post;
    StateHasChanged();
  }
  private async void CreateComment()
  {
    try
    {
      // This check if SelectedAbstractPost (it means where did you presses reply button) is the original post
      // or any comment.
      // If yes then it sends a comment directly to post
      if (SelectedAbstractPost.GetType() == Post.GetType())
      {
        Comment comment = await PostService.CommentPost(CommentObjectRequest);
        if (comment != null)
        {
          comment.username = AuthenticationService.User.Username;
          comment.url = AuthenticationService.User.Url;
          Post.comments.Add(comment);
        }
      }
      // else it sends a comment to a post's comment
      else
      {
        Comment comment = await PostService.ReplyComment(CommentObjectRequest);
        comment.username = AuthenticationService.User.Username;
        comment.url = AuthenticationService.User.Url;
        if (comment != null)
        {
          if (((Comment)SelectedAbstractPost).parent_comment != null)
          {
            Comment parent = Post.comments.Find(x => ((Comment)SelectedAbstractPost).parent_comment.uuid == x.uuid);
            comment.parent_comment = parent;
            if (parent.replies == null)
            {
              parent.replies = new List<Comment>();
            }
            parent.replies.Add(comment);
          }
          // This means that comment reply (comment selected) is root comment
          else
          {
            Comment parent = Post.comments.Find(x => comment.rootCommentUUID == x.uuid);
            comment.parent_comment = parent;
            if (parent.replies == null)
            {
              parent.replies = new List<Comment>();
            }
            parent.replies.Add(comment);
          }
        }
      }
      CommentObjectRequest.comment = null;
      CommentObjectRequest.uuid = Post.uuid;
      SelectedAbstractPost = Post;
    }
    catch (System.Exception error)
    {
      throw error;
    }
    StateHasChanged();
  }
  private void ChangeComment(ChangeEventArgs e)
  {
    string value = e.Value.ToString();
    if (!String.IsNullOrEmpty(value))
    {
      CommentObjectRequest.comment = value;

    }
  }

  private void ChangeAbstractPostData(AbstractPost value)
  {
    if (value != null)
    {
      SelectedAbstractPost = value;
      CommentObjectRequest.uuid = value.uuid;

      if (value is Comment comment)
      {
        CommentObjectRequest.comment = $"@{comment.username} ";
      }
      else
      {
        CommentObjectRequest.comment = string.Empty;
      }
      SelectTextarea();
      StateHasChanged();
    }
  }

  private async void SelectTextarea()
  {
    await JS.InvokeVoidAsync("selectTextarea", commentTextarea);
  }

  private async void ChangeStatusLikePost()
  {
    try
    {
      if (!Post.isLiked)
      {
        Post.isLiked = await PostService.LikePost(Post.uuid);
        if (Post.isLiked)
        {
          Post.likes += 1;
        }
      }
      else
      {
        bool isDisliked = await PostService.DislikePost(Post.uuid);
        if (isDisliked)
        {
          Post.isLiked = false;
          Post.likes -= 1;
        }
      }
    }
    catch (System.Exception error)
    {
      Console.WriteLine(error);
      throw error;
    }
    StateHasChanged();
  }

  private void ShowCommentLikes()
  {
    var options = new ModalOptions
      {
        UseCustomLayout = true
      };
    var parameters = new ModalParameters().Add(nameof(DisplayPostLikes.Post), Post);
    Modal.Show<DisplayPostLikes>("Me gusta", parameters, options);
  }

  private void NextImage()
  {
    if (Images != null && Images.Any())
    {
      currentIndex = (currentIndex + 1) % Images.Count;
      StateHasChanged();
    }
  }

  private void PreviousImage()
  {
    if (Images != null && Images.Any())
    {
      currentIndex = (currentIndex - 1 + Images.Count) % Images.Count;
      StateHasChanged();
    }
  }

}