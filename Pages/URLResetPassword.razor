@page "/accounts/password/reset/confirmation"
@inject NavigationManager NavigationManager
@using UVGramWeb.Services;
@inject IHttpService httpService
@using System.Net;
@using UVGramWeb.Pages.Components
@inject UVGramWeb.Services.IAuthenticationService AuthenticationService
@using UVGramWeb.Shared.Data;

@if (DataLoaded)
{
    @if (!Valid)
    {
        <NotFound></NotFound>
    }
    else
    {
        <UVGramWeb.Pages.Components.Topbar>
    <TopbarTools></TopbarTools>
</UVGramWeb.Pages.Components.Topbar>
        <div class="change-password-main">
            <EditForm model="@model" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="cp-form card">
                    <div class="cpf-description">
                        <h2>Crea una contraseña segura</h2>
                        <p class="text-muted text-center">La contraseña debe tener al menos seis caracteres e incluir una
                            combinación de números, letras y caracteres especiales (!$\%).</p>
                    </div>
                    <div class="cpf-inputs">
                        <div class="cpfi-container">
                            <p class="cpfi-label-message">@PasswordMessage</p>
                            <div class="custom-form-floating">
                                <input id="password" type="text" autocomplete="off" class="custom-form-input"
                            aria-label="Contraseña" required=true aria-required="true" @oninput="PasswordInputOnChange"
                            Value="@model.password" ValueExpression="@(() => model.password)" />
                                <label for="password" class="custom-form-floating-label">Contraseña nueva</label>
                            </div>
                        </div>
                        <div class="cpfi-container">
                            <p class="cpfi-label-message">@ConfirmPasswordMessage</p>
                            <div class="custom-form-floating">
                                <input id="confirmPassword" type="text" autocomplete="off" class="custom-form-input"
                            aria-label="Repetir contraseña nueva" required=true aria-required="true"
                            @oninput="ConfirmPasswordInputOnChange" />
                                <label for="confirmPassword" class="custom-form-floating-label">Repetir contraseña nueva</label>
                            </div>
                        </div>
                    </div>
                    <div class="cpf-buttons">
                        <button class="custom-btn custom-btn-primary">
                            <StatusOperation Loading="@loading" Done="@done" Message="Restablecer contraseña"></StatusOperation>
                        </button>
                    </div>
                    @if (errorMessage != null)
                    {
                        <p role="alert" class="text-danger text-center">
                            <span>@errorMessage</span>
                        </p>
                    }
                </div>
            </EditForm>
        </div>
    }
}

@code {
    [Parameter]
    public string Data { get; set; }
    bool DataLoaded = false;
    bool loading = false;
    bool done = false;
    string errorMessage;
    public bool Valid { get; set; } = false;
    public string ValidChangePasswordUri { get; set; }
    [CascadingParameter] public Task<AuthenticationState> authStateTask { get; set; }
    private ChangeForgottenPassword model = new ChangeForgottenPassword();
    private string ConfirmPassword { get; set; }
    private string ConfirmPasswordMessage { get; set; }
    private string PasswordMessage { get; set; }

    private void ConfirmPasswordInputOnChange(ChangeEventArgs e)
    {
        string value = e.Value.ToString();
        ConfirmPassword = value;
        ValidatePasswords();
    }
    private void PasswordInputOnChange(ChangeEventArgs e)
    {
        string value = e.Value.ToString();
        model.password = value;
        if (value.Length < 6)
        {
            PasswordMessage = "Las contraseñas deben tener 6 caracteres";
        }
        else
        {
            PasswordMessage = null;
        }
        ValidatePasswords();
    }

    private void ValidatePasswords()
    {
        if (ConfirmPassword != null && ConfirmPassword != model.password)
        {
            ConfirmPasswordMessage = "Las contraseñas no coinciden";
        }
        else
        {
            ConfirmPasswordMessage = null;
        }
    }

    private void OnValidSubmit()
    {
        if (model.password == ConfirmPassword)
        {
            Console.WriteLine("test");
        }
    }

    protected override async void OnInitialized()
    {
        CheckIfUserIsLogged();
        try
        {
            var querystring = NavigationManager.QueryString();
            var dataUri =
            $"uuid={WebUtility.UrlEncode(querystring["uuid"])}&id={WebUtility.UrlEncode(querystring["id"])}&data={WebUtility.UrlEncode(querystring["data"])}";
            string resultData = await httpService.Get($"/accounts/verification/url/change_password?{dataUri}");
            dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(resultData);
            var message = json.message.redirect;
            string result = Convert.ToString(message);
            if (result != null)
            {
                ValidChangePasswordUri = $"/accounts/password/reset/confirmation?{dataUri}";
                Valid = true;
            }
        }
        catch (System.Exception error)
        {
            Valid = false;
            Console.WriteLine(error);
            errorMessage = error.Message;
            DataLoaded = true;
            StateHasChanged();
        }
        DataLoaded = true;
        StateHasChanged();
    }
    private async void CheckIfUserIsLogged()
    {
        var user = (await authStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }


}