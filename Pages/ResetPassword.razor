@page "/accounts/password/reset"
@inject NavigationManager Navigation;
@layout HomeLayout
@inject Services.IAccountService AccountService;
@using UVGramWeb.Pages.Components
@using UVGramWeb.Shared.Data;

<div class="reset-password-main">
    <div class="rp-form card">
        <EditForm Model="resetPasswordModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="rpf-description">
                <img src="/images/ide-17.svg" alt="Imagen decorativa">
                <h2>¿Olvidaste tu contraseña?</h2>
                <p class="text-muted text-center">Ingresa tu correo electrónico o nombre de usuario y te enviaremos un
                    enlace para que recuperes el acceso
                    a tu
                    cuenta.</p>
            </div>
            <div class="rpf-inputs">
                <div class="custom-form-floating">
                    <InputText id="emailOrUsername" type="text" autocomplete="off" class="custom-form-input"
                        aria-label="Correo electrónico o usuario" required=true aria-required="true"
                        @bind-Value="resetPasswordModel.emailOrUsername" />
                    <label for="emailOrUsername" class="custom-form-floating-label">Correo electrónico o usuario</label>
                </div>
            </div>
            @if (errorMessage != null)
            {
                <p role="alert" class="text-danger text-center">
                    <span>@errorMessage</span>
                </p>
            }
            <div class="rpf-buttons">
                <button class="custom-btn custom-btn-primary">
                    <StatusOperation Loading="@loading" Done="@done" Message="Enviar enlace"></StatusOperation>
                </button>
                <button class="custom-btn custom-btn-secondary" @onclick="@(() => Navigation.NavigateTo("/"))">Volver
                    al
                    inicio</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] public Task<AuthenticationState> authStateTask { get; set; }
    bool loading = false;
    bool done = false;
    string errorMessage;
    private UserEmailOrUsername resetPasswordModel = new UserEmailOrUsername();

    protected override async void OnInitialized()
    {
        var user = (await authStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async void OnValidSubmit()
    {
        if (done)
        {
            return;
        }
        errorMessage = null;
        loading = true;
        done = false;
        try
        {
            if (!done)
            {
                bool result = await AccountService.CreateResetConfirmationAddress(resetPasswordModel);
                if (result)
                {
                    done = true;
                }
            }
        }
        catch (Exception error)
        {
            Console.WriteLine(error.Message);
            errorMessage = error.Message;
            loading = false;
            done = false;
        }
        loading = false;
        StateHasChanged();
    }


}