@using UVGramWeb.Shared.Data
@using UVGramWeb.Shared.Models
@using UVGramWeb.Shared.Helpers
@inject UVGramWeb.Services.IPostService PostService;
@inject UVGramWeb.Services.IAuthenticationService AuthenticationService

<div class="comment-wrapper">
    <div class="comment-layout">
        <div class="cl-userprofile">
            <UserProfile></UserProfile>
        </div>
        <div class="comment-content">
            <span class="comment-spn"><a href="@CommentData.username">@CommentData.username</a>
                @CommentData.comment
            </span>
            <div class="actions-wrapper">
                <div class="actions">
                    <div class="act-timestamp">
                        <time class="text-muted" datetime="@CommentData.created_time">
                            <span>
                                @RelativeDateHelper.ToRelativeDate(Convert.ToDateTime(CommentData.created_time))
                            </span>
                        </time>
                    </div>
                    <button class="border-0 bg-transparent" @onclick="ShowCommentLikes">
                        <span class="text-muted">@CommentData.likes Me gusta</span>
                    </button>
                    <button class="border-0 bg-transparent"
                        @onclick="(() => ChangeAbstractPostSelected.InvokeAsync(CommentData))">
                        <span class="text-muted">Responder</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="like-action">
            <button class="border-0 bg-transparent" @onclick="ChangeStatusLikeComment">
                @if (CommentData.isLiked)
                {
                    <svg width="12px" height="12px" color="#ff0000" fill="#ff0000" viewBox="0 0 512 512"
                    xmlns="http://www.w3.org/2000/svg">
                        <path
                        d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z" />
                    </svg>
                }
                else
                {
                    <svg aria-label="Me gusta" class="_8-yf5 " color="#8e8e8e" fill="#8e8e8e" height="12" role="img"
                    viewBox="0 0 24 24" width="12">
                        <path
                        d="M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197 7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141 14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675 1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04 6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61 2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018 2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774 2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z">
                        </path>
                    </svg>
                }

            </button>
        </div>
    </div>


    @if (CommentData.replies != null && CommentData.replies.Count > 0)
    {
        <div class="comment-replies">

            @foreach (var item in CommentData.replies)
            {
                <CommentComp CommentData="@item" AddCommentToRootList="AddCommentToList"
            ChangeAbstractPostSelected="ChangeAbstractPostSelected"></CommentComp>
            }
        </div>
    }
</div>

@code
{
    [Parameter]
    public Comment CommentData { get; set; }
    [Parameter]
    public Action ParentMethod { get; set; }

    [Parameter]
    public EventCallback<Comment> AddCommentToRootList { get; set; }

    [Parameter]
    public EventCallback<AbstractPost> ChangeAbstractPostSelected { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private async void ChangeStatusLikeComment()
    {
        try
        {
            if (!CommentData.isLiked)
            {
                CommentData.isLiked = await PostService.LikeComment(CommentData.uuid);
                if (CommentData.isLiked)
                {
                    CommentData.likes += 1;
                }
            }
            else
            {
                bool isDisliked = await PostService.DisLikeComment(CommentData.uuid);
                if (isDisliked)
                {
                    CommentData.isLiked = false;
                    CommentData.likes -= 1;
                }
            }
        }
        catch (System.Exception error)
        {
            Console.WriteLine(error);
            throw error;
        }
        StateHasChanged();
    }

    private async void ReplyComment()
    {
        try
        {
            CreateComment model = new CreateComment();
            model.comment = "hola";
            model.uuid = CommentData.uuid;
            Comment reply = await PostService.ReplyComment(model);
            if (reply != null)
            {
                reply.username = AuthenticationService.User.Username;
                if (reply.isReplyInnerComment)
                {
                    await AddCommentToRootList.InvokeAsync(reply);
                }
                else
                {
                    CommentData.replies.Add(reply);
                }
            }
        }
        catch (System.Exception error)
        {
            Console.WriteLine(error);
            throw error;
        }
        StateHasChanged();
    }

    private void AddCommentToList(Comment comment)
    {
        if (comment != null)
        {
            CommentData.replies.Add(comment);
        }
    }

    private void ShowCommentLikes()
    {
        var options = new ModalOptions
        {
            UseCustomLayout = true
        };
        var parameters = new ModalParameters().Add(nameof(DisplayPostLikes.Post), CommentData);
        Modal.Show<DisplayPostLikes>("Me gusta", parameters, options);
    }


}