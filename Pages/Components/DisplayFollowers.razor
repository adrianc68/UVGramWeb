@using UVGramWeb.Shared.Data
@inject UVGramWeb.Services.IAccountService AccountService;
@inject UVGramWeb.Services.IAuthenticationService AuthenticationService;

<div class="modal show" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">Seguidores</h1>
                <div class="btn-modal-close-container">
                    <button class="close custom-btn-secondary" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

            </div>
            <div class="followers">
                @foreach (var userSearch in usersFilter)
                {
                    <UserDisplay User="@userSearch"></UserDisplay>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public string Username { get; set; }
    private List<UserSearch> usersFilter = new List<UserSearch>();

    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    private async Task Cancel() => await BlazoredModal.CancelAsync();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            if (!String.IsNullOrEmpty(Username))
            {
                usersFilter = await AccountService.GetFollowers(Username);
            }
        }
        catch (System.Exception error)
        {
            Console.WriteLine(error);
        }
        StateHasChanged();
    }
}