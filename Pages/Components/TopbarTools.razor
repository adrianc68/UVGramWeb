@using UVGramWeb.Shared.Data
@inject UVGramWeb.Services.IAuthenticationService AuthService
@inject NavigationManager NavManager
@inject Services.IAccountService AccountService;

<div class="topbar-search">
    <input type="text" id="search" class="form-input-normal" placeholder="Buscar..." aria-label="Buscar"
        @oninput="SearchUsers" autocomplete="off" @onfocusin="ShowSearchTip" @onblur="HandleBlur">

    @if (ShowSearch)
    {
        @if (usersFilter.Count != 0)
        {
            <div class="notsqr"></div>
            <div class="topbar-search-users card" @onfocusin="HandleFocus" @onfocusout="HandleBlur" tabindex="-1">
        @foreach (var userSearch in usersFilter)
                {
                    <UserDisplay User="@userSearch" OnClick="HideSearchTip"></UserDisplay>
                }
            </div>
        }
    }


</div>
<div class="topbar-actions">
    @{
        if (AuthService.User == null)
        {
            <button class="custom-btn custom-btn-primary" @onclick="@(() => NavManager.NavigateTo("/login"))">Iniciar
                sesi√≥n</button>
            <button class="custom-btn custom-btn-secondary" @onclick="@(() =>
    NavManager.NavigateTo("/signup"))">Registrarse</button>
        }
        else
        {
            <div class="tbt-actions">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-label="home"></span>
                </NavLink>
                <NavLink class="nav-link">
                    <span class="oi oi-plus" aria-label="Publicar"></span>
                </NavLink>
                <NavLink class="nav-link" href="@($"/{AuthService.User.Username}")" Match="NavLinkMatch.All">
                    <span class="oi oi-person" aria-label="Mi perfil"></span>
                </NavLink>

                <button class="btn shadow-none" @onclick="ShowFollowedUsersModal">
                    <span class="oi oi-heart" aria-label="Notificaciones"></span>
                </button>

                <NavLink class="nav-link" href="/logout">
                    <span class="oi oi-account-logout" title="Salir" aria-label="Salir"></span>
                </NavLink>
            </div>
        }
    }
</div>

@code {
    CancellationTokenSource token;
    private List<UserSearch> usersFilter = new List<UserSearch>();
    private bool ShowSearch { get; set; } = false;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    private async void SearchUsers(ChangeEventArgs e)
    {
        string value = e.Value.ToString();
        if (!String.IsNullOrEmpty(value))
        {
            usersFilter = await AccountService.FilterUsers(Convert.ToString(e.Value));
        }
        else
        {
            usersFilter = new List<UserSearch>();
        }
        ShowSearch = true;
        StateHasChanged();
    }

    private void ShowSearchTip()
    {
        ShowSearch = true;
        StateHasChanged();
    }

    private async void HideSearchTip()
    {
        await Task.Delay(200);
        ShowSearch = false;
        StateHasChanged();
    }

    private async Task HandleBlur(FocusEventArgs e)
    {
        token = new CancellationTokenSource();
        await Task.Factory.StartNew(async () =>
        {
            await Task.Delay(100);
            ShowSearch = false;
            await InvokeAsync(StateHasChanged);
        }, token.Token);
    }

    private void HandleFocus(FocusEventArgs e)
    {
        if (token is CancellationTokenSource)
        {
            token.Cancel();
        }
    }


    private void ShowFollowedUsersModal()
    {
        var options = new ModalOptions
        {
            UseCustomLayout = true
        };
        Modal.Show<DisplayNotifications>("Notificaciones", options);
    }

}